{"version":3,"sources":["login/login.component.js","login/login.service.js","common/footer/footer.component.js","common/header/header.component.js","common/utils/utils.service.js","customer/customer-add/customer-add.component.js","customer/customer-add/customer-add.service.js","customer/customer-details/customer-details.component.js","customer/customer-details/customer-details.service.js","customer/customer-list/customer-list.component.js","customer/customer-list/customer-list.service.js","customer/customer-summary/customer-summary.component.js","customer/customer-summary/customer-summary.service.js","app.js"],"names":["LoginController","loginService","$location","self","this","email","password","errorMessage","$onInit","login","then","data","path","err","LoginService","$http","factory","post","FooterController","NavigationController","UtilsService","findById","a","id","i","length","CustomerAddController","customerAddService","customer","firstName","lastName","address","phoneNumber","home","totalSize","numStories","numBedrooms","numBathrooms","acType","heatingType","installationDate","room","size","numWindows","numStory","rooms","options","acTypes","heatTypes","clearCustomerInfoForm","clearHomeForm","clearRoomForm","addRoom","push","removeRoom","index","splice","setSessionForSummary","window","localStorage","clear","customerInfo","JSON","stringify","homeInfo","roomsInfo","CustomerAddService","CustomerDetailsController","customerDetailsService","$routeParams","house","params","getCustomerDetails","getCustomerByID","getHomeDetails","homeID","getRooms","error","Error","getHomeByCustomerHomeId","getRoomsByCustomerHomeId","CustomerDetailsService","get","CustomerListController","customerListService","customers","getCustomerList","console","log","viewCustomerDetails","addNewCustomer","CustomerListService","CustomerSummaryController","customerSummaryService","getInfoFromLocalStorage","save","parse","CustomerSummaryService","angular","module","config","$routeProvider","when","template","component","templateUrl","controller","$inject"],"mappings":"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","file":"bundle.js","sourcesContent":["angular\n    .module('main')\n    .component('login', {\n        templateUrl: 'views/login/login.template.html',\n        controller: LoginController\n    });\n\nLoginController.$inject = ['login.service', '$location'];\n\nfunction LoginController(loginService, $location) {\n    var self = this;\n\n    self.email = '';\n    self.password = '';\n    self.errorMessage = '';\n\n    self.$onInit = function () {\n    };\n\n    self.login = function () {\n        loginService.login(self.email, self.password)\n            .then(function (data) {\n                self.errorMessage = '';\n                $location.path('/customers');\n            }, function (err) {\n                self.email = '';\n                self.password = '';\n                self.errorMessage = err.data;\n            });\n    };\n}","angular\n    .module('main')\n    .factory('login.service', LoginService);\n\nLoginService.$inject = ['$http'];\n\nfunction LoginService($http) {\n\n  var factory = {};\n\n  factory.login = function (email, password) {\n    return $http.post('/api/user/authenticate', {email: email, password: password});\n  };\n\n  return factory;\n};","\"use strict\"\n\nangular\n    .module('main')\n    .component('bottomNav', {\n        templateUrl: 'views/common/footer.template.html',\n        controller: FooterController\n    });\n\nFooterController.$inject = [];\n\nfunction FooterController() {\n    var self = this;\n\n}","\"use strict\"\n\nangular\n    .module('main')\n    .component('topNav', {\n        templateUrl: 'views/common/header.template.html'\n    });\n\nNavigationController.$inject = [];\n\nfunction NavigationController() {\n    var self = this;\n\n}","angular\n    .module('main')\n    .factory('utils.service', UtilsService)\n\nUtilsService.$inject = [];\n\nfunction UtilsService () {\n  return {\n    findById: function findById(a, id) {\n      for (var i = 0; i < a.length; i++) {\n        if (a[i].id == id) return a[i];\n      }\n      return null;\n    }\n  };\n};","angular\n    .module('main')\n    .component('customerAdd', {\n        templateUrl: 'views/customer/customer-add/customer-add.template.html',\n        controller: CustomerAddController\n    });\n\nCustomerAddController.$inject = ['customer-add.service', '$location'];\n\nfunction CustomerAddController(customerAddService, $location) {\n    var self = this;\n\n    self.customer = {\n        firstName: null,\n        lastName: null,\n        address: null,\n        phoneNumber: null,\n        email: null\n    };\n\n    self.home = {\n        totalSize: null,\n        numStories: null,\n        numBedrooms: null,\n        numBathrooms: null,\n        acType: null,\n        heatingType: null,\n        installationDate: null\n    };\n\n    self.room = {\n        size: null,\n        numWindows: null,\n        numStory: null\n    };\n\n    self.rooms = [];\n    self.options = [1,2,3,4,5,6];\n    self.acTypes = ['Central Air', 'Window Unit', 'Mini Split', 'Other'];\n    self.heatTypes = ['Furnace', 'Boiler', 'Heat Pump', 'Gas', 'Other'];\n\n    self.clearCustomerInfoForm = function() {\n        self.customer.firstName = null;\n        self.customer.lastName = null;\n        self.customer.address = null;\n        self.customer.phoneNumber = null;\n        self.customer.email = null;\n    };\n\n    self.clearHomeForm = function() {\n        self.home.totalSize = null;\n        self.home.numStories = null;\n        self.home.numBedrooms = null;\n        self.home.numBathrooms = null;\n        self.home.acType = null;\n        self.home.heatingType = null;\n        self.home.installationDate = null;\n    };\n\n    self.clearRoomForm = function() {\n        self.room.size = null;\n        self.room.numWindows = null;\n        self.room.numStory = null;\n    };\n\n    self.addRoom = function(room) {\n\n        self.rooms.push({\n            size: room.size,\n            numWindows: room.numWindows,\n            numStory: room.numStory\n        });\n\n        self.clearRoomForm();\n    };\n\n    self.removeRoom = function(index) {\n        self.rooms.splice(index, 1);\n    };\n\n    self.setSessionForSummary = function() {\n        if(('localStorage' in window) && window.localStorage !== null) {\n            localStorage.clear();\n            localStorage.customerInfo = JSON.stringify(self.customer);\n            localStorage.homeInfo = JSON.stringify(self.home);\n            localStorage.roomsInfo = JSON.stringify(self.rooms);\n        }\n\n        $location.path('/customer/new/summary');\n    };\n}","angular\n    .module('main')\n    .factory('customer-add.service', CustomerAddService);\n\nCustomerAddService.$inject = ['$http'];\n\nfunction CustomerAddService($http) {\n    var factory = {};\n\n    //todo: possible have service methods to retrieve dropdown data & address validation-y things\n    \n    return factory;\n}","angular\n    .module('main')\n    .component('customerDetails', {\n        templateUrl: 'views/customer/customer-details/customer-details.template.html',\n        controller: CustomerDetailsController\n    });\n\nCustomerDetailsController.$inject = ['customer-details.service', '$routeParams'];\n\nfunction CustomerDetailsController(customerDetailsService, $routeParams) {\n    var self = this;\n\n    self.customer = {};\n    self.house = {};\n    self.rooms = [];\n\n    self.params = $routeParams;\n\n    self.$onInit = function () {\n        if (self.params) {\n            getCustomerDetails(self.params.id);\n        }\n    };\n\n    var getCustomerDetails = function (id) {\n        customerDetailsService.getCustomerByID(id)\n            .then(function (data) {\n                self.customer = data.data;\n                getHomeDetails(self.customer.homeID);\n                getRooms(self.customer.homeID);\n            }, function (error) {\n                throw new Error(error);\n            });\n    };\n\n    var getHomeDetails = function (id) {\n        customerDetailsService.getHomeByCustomerHomeId(id)\n            .then(function (data) {\n                self.house = data.data;\n            }, function (err) {\n                throw new Error(err);\n            });\n    };\n\n    var getRooms = function (id) {\n        customerDetailsService.getRoomsByCustomerHomeId(id)\n            .then(function (data) {\n                self.rooms = data.data;\n            }, function (err) {\n                throw new Error(err);\n            });\n    }\n}","angular\n    .module('main')\n    .factory('customer-details.service', CustomerDetailsService);\n\nCustomerDetailsService.$inject = ['$http'];\n\nfunction CustomerDetailsService($http) {\n    var factory = {};\n\n    factory.getCustomerByID = function(id) {\n        return $http.get('/api/customer/' + id);\n    };\n\n    factory.getHomeByCustomerHomeId = function(id) {\n        return $http.get('/api/house/' + id);\n    };\n\n    factory.getRoomsByCustomerHomeId = function(id) {\n        return $http.get('/api/house/' + id + '/rooms')\n    }\n\n    return factory;\n};","angular\n    .module('main')\n    .component('customerList', {\n        templateUrl: 'views/customer/customer-list/customer-list.template.html',\n        controller: CustomerListController\n    });\n\nCustomerListController.$inject = ['customer-list.service', '$location'];\n\nfunction CustomerListController(customerListService, $location) {\n    var self = this;\n\n    self.customers = [];\n\n    self.$onInit = function () {\n        customerListService.getCustomerList()\n            .then(function (data) {\n                console.log(data);\n                self.customers = data.data;\n            }, function(err) {\n                throw new Error(err);\n            });\n    };\n\n    self.viewCustomerDetails = function (id) {\n        $location.path('/customer/' + id);\n    };\n\n    self.addNewCustomer = function () {\n        $location.path('/customer/new');\n    };\n};","angular\n    .module('main')\n    .factory('customer-list.service', CustomerListService);\n\nCustomerListService.$inject = ['$http'];\n\nfunction CustomerListService($http) {\n    var factory = {};\n\n    factory.getCustomerList = function() {\n        return $http.get('/api/customers');\n    };\n\n    return factory;\n};","angular\n    .module('main')\n    .component('customerSummary', {\n        templateUrl: 'views/customer/customer-summary/customer-summary.template.html',\n        controller: CustomerSummaryController\n    });\n\nCustomerSummaryController.$inject = ['customer-summary.service', '$location'];\n\nfunction CustomerSummaryController(customerSummaryService, $location) {\n    var self = this;\n\n    self.customerInfo = {};\n    self.homeInfo = {};\n    self.rooms = [];\n\n    self.$onInit = function () {\n        getInfoFromLocalStorage();\n    };\n\n    self.save = function() {\n        //customerSummaryService save\n        //show toaster\n        localStorage.clear();\n        $location.path('/customers');\n    };\n\n    var getInfoFromLocalStorage = function () {\n        if (('localStorage' in window) && window.localStorage !== null) {\n            if (localStorage.customerInfo) self.customerInfo = JSON.parse(localStorage.customerInfo);\n            if (localStorage.homeInfo) self.homeInfo = JSON.parse(localStorage.homeInfo);\n            if (localStorage.roomsInfo) self.rooms = JSON.parse(localStorage.roomsInfo);\n        }\n    };\n}","angular\n    .module('main')\n    .factory('customer-summary.service', CustomerSummaryService);\n\nCustomerSummaryService.$inject = ['$http'];\n\nfunction CustomerSummaryService($http) {\n    var factory = {};\n\n    //todo: save method\n\n    return factory;\n}","angular.module('main', ['ngMaterial', 'ngMessages', 'ngRoute'])\n    .config(function($routeProvider) {\n        $routeProvider\n            .when('/', { template: '<login></login>' })\n            .when('/customers', { template: '<customer-list></customer-list>' })\n            .when('/customer/new', { template: '<customer-add></customer-add>'})\n            .when('/customer/new/summary', { template: '<customer-summary></customer-summary>'})\n            .when('/customer/:id', { template: '<customer-details></customer-details>'})\n        });"],"sourceRoot":"/source/"}