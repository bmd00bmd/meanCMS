{"version":3,"sources":["login/login.component.js","login/login.service.js","common/footer/footer.component.js","common/header/header.component.js","common/utils/utils.service.js","customer/customer-add/customer-add.component.js","customer/customer-add/customer-add.service.js","customer/customer-details/customer-details.component.js","customer/customer-details/customer-details.service.js","customer/customer-list/customer-list.component.js","customer/customer-list/customer-list.service.js","customer/customer-summary/customer-summary.component.js","customer/customer-summary/customer-summary.service.js","app.js"],"names":["LoginController","loginService","$location","self","this","email","password","errorMessage","$onInit","login","form","$valid","then","response","path","error","data","reason","LoginService","$http","$q","logger","onComplete","onError","reject","post","FooterController","NavigationController","UtilsService","findById","a","id","i","length","CustomerAddController","customerAddService","customer","firstName","lastName","address","phoneNumber","home","totalSize","numStories","numBedrooms","numBathrooms","acType","heatingType","installationDate","room","alias","size","numWindows","numStory","rooms","options","acTypes","heatTypes","clearCustomerInfoForm","clearHomeForm","clearRoomForm","addRoom","push","removeRoom","index","splice","setSessionForSummary","window","localStorage","clear","customerInfo","JSON","stringify","homeInfo","roomsInfo","CustomerAddService","CustomerDetailsController","customerDetailsService","$routeParams","house","params","getCustomerDetails","getCustomerByID","getHomeDetails","getRooms","callback","getHomeByCustomerId","getRoomsByHomeId","CustomerDetailsService","get","CustomerListController","customerListService","customers","getCustomerList","viewCustomerDetails","addNewCustomer","CustomerListService","CustomerSummaryController","customerSummaryService","$mdToast","getInfoFromLocalStorage","save","saveCustomerInfo","parse","saveHouseInfo","customerId","reqObj","saveHomeInfo","CustomerSummaryService","angular","module","config","$routeProvider","when","template","component","templateUrl","controller","$inject","factory"],"mappings":"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","file":"bundle.js","sourcesContent":["angular\n    .module(\"main\")\n    .component(\"login\", {\n        templateUrl: \"views/login/login.template.html\",\n        controller: LoginController\n    });\n\nLoginController.$inject = [\"login.service\", \"$location\"];\n\nfunction LoginController(loginService, $location) {\n    var self = this;\n\n    self.email = \"\";\n    self.password = \"\";\n    self.errorMessage = \"\";\n\n    self.$onInit = function () {\n    };\n\n    self.login = function (form) {\n        if (form.$valid) {\n            loginService.login(self.email, self.password)\n                .then(function (response) {\n                    self.errorMessage = \"\";\n                    $location.path(\"/customers\");\n                })\n                .catch(function (error) {\n                    self.email = \"\";\n                    self.password = \"\";\n                    self.errorMessage = error.data.reason;\n                });\n        }\n        else {\n            self.errorMessage = \"Please fill in the required inputs.\";\n        }\n    }\n}","angular\n\t.module(\"main\")\n\t.factory(\"login.service\", LoginService);\n\nLoginService.$inject = [\"$http\", \"$q\", \"$log\"];\n\nfunction LoginService($http, $q, logger) {\n\n\treturn {\n\t\tlogin: login\n\t};\n\n\tfunction login(email, password) {\n\t\treturn $http.post(\"/api/user/authenticate\", { email: email, password: password })\n\t\t\t.then(onComplete, onError);\n\n\t\tfunction onComplete(response) {\n\t\t\treturn response.data;\n\t\t};\n\n\t\tfunction onError(error) {\t\t\n\t\t\treturn $q.reject(error);\n\t\t};\n\t};\n}","\"use strict\"\n\nangular\n    .module(\"main\")\n    .component(\"bottomNav\", {\n        templateUrl: \"views/common/footer.template.html\",\n        controller: FooterController\n    });\n\nFooterController.$inject = [];\n\nfunction FooterController() {\n}","\"use strict\"\n\nangular\n    .module(\"main\")\n    .component(\"topNav\", {\n        templateUrl: \"views/common/header.template.html\"\n    });\n\nNavigationController.$inject = [];\n\nfunction NavigationController() {\n}","angular\n    .module(\"main\")\n    .factory(\"utils.service\", UtilsService)\n\nUtilsService.$inject = [];\n\nfunction UtilsService () {\n  return {\n    findById: function findById(a, id) {\n      for (var i = 0; i < a.length; i++) {\n        if (a[i].id == id) return a[i];\n      }\n      return null;\n    }\n  };\n};","angular\n    .module(\"main\")\n    .component(\"customerAdd\", {\n        templateUrl: \"views/customer/customer-add/customer-add.template.html\",\n        controller: CustomerAddController\n    });\n\nCustomerAddController.$inject = [\"customer-add.service\", \"$location\"];\n\nfunction CustomerAddController(customerAddService, $location) {\n    var self = this;\n\n    self.customer = {\n        firstName: null,\n        lastName: null,\n        address: null,\n        phoneNumber: null,\n        email: null\n    };\n\n    self.home = {\n        totalSize: null,\n        numStories: null,\n        numBedrooms: null,\n        numBathrooms: null,\n        acType: null,\n        heatingType: null,\n        installationDate: null\n    };\n\n    self.room = {\n        alias: null,\n        size: null,\n        numWindows: null,\n        numStory: null\n    };\n\n    self.rooms = [];\n    self.options = [1, 2, 3, 4, 5, 6];\n    self.acTypes = [\"Central Air\", \"Window Unit\", \"Mini Split\", \"Other\"];\n    self.heatTypes = [\"Furnace\", \"Boiler\", \"Heat Pump\", \"Gas\", \"Other\"];\n\n    self.clearCustomerInfoForm = function () {\n        self.customer.firstName = null;\n        self.customer.lastName = null;\n        self.customer.address = null;\n        self.customer.phoneNumber = null;\n        self.customer.email = null;\n    };\n\n    self.clearHomeForm = function () {\n        self.home.totalSize = null;\n        self.home.numStories = null;\n        self.home.numBedrooms = null;\n        self.home.numBathrooms = null;\n        self.home.acType = null;\n        self.home.heatingType = null;\n        self.home.installationDate = null;\n    };\n\n    self.clearRoomForm = function () {\n        self.room.alias = null;\n        self.room.size = null;\n        self.room.numWindows = null;\n        self.room.numStory = null;\n    };\n\n    self.addRoom = function (room) {\n\n        self.rooms.push({\n            alias: room.alias,\n            size: room.size,\n            numWindows: room.numWindows,\n            numStory: room.numStory\n        });\n\n        self.clearRoomForm();\n    };\n\n    self.removeRoom = function (index) {\n        self.rooms.splice(index, 1);\n    };\n\n    self.setSessionForSummary = function (form) {\n        if (form.$valid) {\n            if ((\"localStorage\" in window) && window.localStorage !== null) {\n                localStorage.clear();\n                localStorage.customerInfo = JSON.stringify(self.customer);\n                localStorage.homeInfo = JSON.stringify(self.home);\n                localStorage.roomsInfo = JSON.stringify(self.rooms);\n            }\n\n            $location.path(\"/customer/new/summary\");\n        }\n    };\n}","angular\n    .module(\"main\")\n    .factory(\"customer-add.service\", CustomerAddService);\n\nCustomerAddService.$inject = [\"$http\"];\n\nfunction CustomerAddService($http) {\n\n    return {\n        //todo: possible have service methods to retrieve dropdown data & address validation-y things\n    };\n\n}","angular\n    .module(\"main\")\n    .component(\"customerDetails\", {\n        templateUrl: \"views/customer/customer-details/customer-details.template.html\",\n        controller: CustomerDetailsController\n    });\n\nCustomerDetailsController.$inject = [\"customer-details.service\", \"$routeParams\"];\n\nfunction CustomerDetailsController(customerDetailsService, $routeParams) {\n    var self = this;\n\n    self.customer = {};\n    self.house = {};\n    self.rooms = [];\n\n    self.params = $routeParams;\n\n    self.$onInit = function () {\n        if (self.params) {\n            getCustomerDetails(self.params.id);\n        }\n    };\n\n    var getCustomerDetails = function (id) {\n        customerDetailsService.getCustomerByID(id)\n            .then(function (response) {\n                self.customer = response;\n                if (self.customer && self.customer.id) {\n                    getHomeDetails(self.customer.id, getRooms);\n                }\n            });\n    };\n\n    var getHomeDetails = function (id, callback) {\n        customerDetailsService.getHomeByCustomerId(id)\n            .then(function (response) {\n                self.house = response;\n                if (self.house && self.house.id) {\n                    callback(self.house.id);\n                }\n            });\n    };\n\n    var getRooms = function (id) {\n        customerDetailsService.getRoomsByHomeId(id)\n            .then(function (response) {\n                self.rooms = response;\n            });\n    }\n}","angular\n    .module(\"main\")\n    .factory(\"customer-details.service\", CustomerDetailsService);\n\nCustomerDetailsService.$inject = [\"$http\", \"$log\"];\n\nfunction CustomerDetailsService($http, logger) {\n\n    return {\n        getCustomerByID: getCustomerByID,\n        getHomeByCustomerId: getHomeByCustomerId,\n        getRoomsByHomeId: getRoomsByHomeId\n    };\n\n    function getCustomerByID(id) {\n        return $http.get(\"/api/customer/\" + id)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n\n    function getHomeByCustomerId(id) {\n        return $http.get(\"/api/house/\" + id)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n\n    function getRoomsByHomeId(id) {\n        return $http.get(\"/api/house/\" + id + \"/rooms\")\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n};","angular\n    .module(\"main\")\n    .component(\"customerList\", {\n        templateUrl: \"views/customer/customer-list/customer-list.template.html\",\n        controller: CustomerListController\n    });\n\nCustomerListController.$inject = [\"customer-list.service\", \"$location\"];\n\nfunction CustomerListController(customerListService, $location) {\n    var self = this;\n\n    self.customers = [];\n\n    self.$onInit = function () {\n        self.getCustomerList();\n    };\n\n    self.getCustomerList = function () {\n        customerListService.getCustomerList()\n            .then(function (response) {\n                self.customers = response;\n            });\n    };\n\n    self.viewCustomerDetails = function (id) {\n        $location.path(\"/customer/\" + id);\n    };\n\n    self.addNewCustomer = function () {\n        $location.path(\"/customer/new\");\n    };\n};","angular\n    .module(\"main\")\n    .factory(\"customer-list.service\", CustomerListService);\n\nCustomerListService.$inject = [\"$http\", \"$log\"];\n\nfunction CustomerListService($http, logger) {\n\n    return {\n        getCustomerList: getCustomerList\n    };\n\n    function getCustomerList() {\n        return $http.get(\"/api/customers\")\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n};","angular\n    .module(\"main\")\n    .component(\"customerSummary\", {\n        templateUrl: \"views/customer/customer-summary/customer-summary.template.html\",\n        controller: CustomerSummaryController\n    });\n\nCustomerSummaryController.$inject = [\"customer-summary.service\", \"$location\"];\n\nfunction CustomerSummaryController(customerSummaryService, $location, $mdToast) {\n    var self = this;\n\n    self.customerInfo = {};\n    self.homeInfo = {};\n    self.rooms = [];\n\n    self.$onInit = function () {\n        getInfoFromLocalStorage();\n    };\n\n    self.save = function () {\n        saveCustomerInfo();\n    };\n\n    var getInfoFromLocalStorage = function () {\n        if ((\"localStorage\" in window) && window.localStorage !== null) {\n            if (localStorage.customerInfo) self.customerInfo = JSON.parse(localStorage.customerInfo);\n            if (localStorage.homeInfo) self.homeInfo = JSON.parse(localStorage.homeInfo);\n            if (localStorage.roomsInfo) self.rooms = JSON.parse(localStorage.roomsInfo);\n        }\n    };\n\n    var saveCustomerInfo = function () {\n        customerSummaryService.saveCustomerInfo(self.customerInfo)\n            .then(function (response) {\n                saveHouseInfo(response.id);\n            });\n    };\n\n    var saveHouseInfo = function (customerId) {\n\n        var reqObj = {\n            \"customerId\": customerId,\n            \"homeInfo\": self.homeInfo,\n            \"roomsInfo\": self.rooms\n        };\n\n        customerSummaryService.saveHomeInfo(reqObj)\n            .then(function (data) {\n                localStorage.clear();\n                $location.path(\"/customers\");\n            });\n    };\n}","angular\n    .module(\"main\")\n    .factory(\"customer-summary.service\", CustomerSummaryService);\n\nCustomerSummaryService.$inject = [\"$http\", \"$log\"];\n\nfunction CustomerSummaryService($http, logger) {\n\n    return {\n        saveHomeInfo: saveHomeInfo,\n        saveCustomerInfo: saveCustomerInfo\n    };\n\n    function saveHomeInfo(data) {\n        return $http.post(\"/api/house/save\", data)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n\n    function saveCustomerInfo(data) {\n        return $http.post(\"/api/customer/save\", data)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n}","angular.module(\"main\", [\"ngMaterial\", \"ngMessages\", \"ngRoute\"])\n    .config(function ($routeProvider) {\n        $routeProvider\n            .when(\"/\", { template: \"<login></login>\" })\n            .when(\"/customers\", { template: \"<customer-list></customer-list>\" })\n            .when(\"/customer/new\", { template: \"<customer-add></customer-add>\" })\n            .when(\"/customer/new/summary\", { template: \"<customer-summary></customer-summary>\" })\n            .when(\"/customer/:id\", { template: \"<customer-details></customer-details>\" })\n    });"],"sourceRoot":"/source/"}