{"version":3,"sources":["login/login.component.js","login/login.service.js","customer/customer-add/customer-add.component.js","customer/customer-add/customer-add.service.js","customer/customer-details/customer-details.component.js","customer/customer-details/customer-details.service.js","customer/customer-list/customer-list.component.js","customer/customer-list/customer-list.service.js","customer/customer-summary/customer-summary.component.js","customer/customer-summary/customer-summary.service.js","common/footer/footer.component.js","common/header/header.component.js","common/utils/utils.service.js","auth.service.js","app.js"],"names":["LoginController","loginService","$location","self","this","email","password","errorMessage","$onInit","login","form","$valid","then","response","path","error","data","reason","LoginService","$http","$q","logger","onComplete","onError","reject","post","CustomerAddController","customerAddService","customer","firstName","lastName","address","phoneNumber","home","totalSize","numStories","numBedrooms","numBathrooms","acType","heatingType","installationDate","room","alias","size","numWindows","numStory","rooms","options","acTypes","heatTypes","clearCustomerInfoForm","clearHomeForm","clearRoomForm","addRoom","push","removeRoom","index","splice","setSessionForSummary","window","localStorage","clear","customerInfo","JSON","stringify","homeInfo","roomsInfo","CustomerAddService","CustomerDetailsController","customerDetailsService","$routeParams","house","params","getCustomerDetails","id","getCustomerByID","getHomeDetails","getRooms","callback","getHomeByCustomerId","getRoomsByHomeId","CustomerDetailsService","get","CustomerListController","customerListService","auth","customers","getCustomerList","viewCustomerDetails","addNewCustomer","CustomerListService","CustomerSummaryController","customerSummaryService","$mdToast","getInfoFromLocalStorage","save","saveCustomerInfo","parse","saveHouseInfo","customerId","reqObj","saveHomeInfo","CustomerSummaryService","FooterController","NavigationController","UtilsService","findById","a","i","length","AuthService","$cookies","getUser","angular","module","config","$routeProvider","when","template","resolve","user","authService","component","templateUrl","controller","$inject","factory"],"mappings":"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","file":"bundle.js","sourcesContent":["angular\n    .module(\"main\")\n    .component(\"login\", {\n        templateUrl: \"views/login/login.template.html\",\n        controller: LoginController\n    });\n\nLoginController.$inject = [\"login.service\", \"$location\"];\n\nfunction LoginController(loginService, $location) {\n    var self = this;\n\n    self.email = \"\";\n    self.password = \"\";\n    self.errorMessage = \"\";\n\n    self.$onInit = function () {\n    };\n\n    self.login = function (form) {\n        if (form.$valid) {\n            loginService.login(self.email, self.password)\n                .then(function (response) {\n                    self.errorMessage = \"\";\n                    $location.path(\"/customers\");\n                })\n                .catch(function (error) {\n                    self.email = \"\";\n                    self.password = \"\";\n                    self.errorMessage = error.data.reason;\n                });\n        }\n        else {\n            self.errorMessage = \"Please fill in the required inputs.\";\n        }\n    }\n}","angular\n\t.module(\"main\")\n\t.factory(\"login.service\", LoginService);\n\nLoginService.$inject = [\"$http\", \"$q\", \"$log\"];\n\nfunction LoginService($http, $q, logger) {\n\n\treturn {\n\t\tlogin: login\n\t};\n\n\tfunction login(email, password) {\n\t\treturn $http.post(\"/api/user/authenticate\", { email: email, password: password })\n\t\t\t.then(onComplete, onError);\n\n\t\tfunction onComplete(response) {\n\t\t\treturn response.data;\n\t\t};\n\n\t\tfunction onError(error) {\n\t\t\treturn $q.reject(error);\n\t\t};\n\t};\n}","angular\n    .module(\"main\")\n    .component(\"customerAdd\", {\n        templateUrl: \"views/customer/customer-add/customer-add.template.html\",\n        controller: CustomerAddController\n    });\n\nCustomerAddController.$inject = [\"customer-add.service\", \"$location\"];\n\nfunction CustomerAddController(customerAddService, $location) {\n    var self = this;\n\n    self.customer = {\n        firstName: null,\n        lastName: null,\n        address: null,\n        phoneNumber: null,\n        email: null\n    };\n\n    self.home = {\n        totalSize: null,\n        numStories: null,\n        numBedrooms: null,\n        numBathrooms: null,\n        acType: null,\n        heatingType: null,\n        installationDate: null\n    };\n\n    self.room = {\n        alias: null,\n        size: null,\n        numWindows: null,\n        numStory: null\n    };\n\n    self.rooms = [];\n    self.options = [1, 2, 3, 4, 5, 6];\n    self.acTypes = [\"Central Air\", \"Window Unit\", \"Mini Split\", \"Other\"];\n    self.heatTypes = [\"Furnace\", \"Boiler\", \"Heat Pump\", \"Gas\", \"Other\"];\n\n    self.clearCustomerInfoForm = function () {\n        self.customer.firstName = null;\n        self.customer.lastName = null;\n        self.customer.address = null;\n        self.customer.phoneNumber = null;\n        self.customer.email = null;\n    };\n\n    self.clearHomeForm = function () {\n        self.home.totalSize = null;\n        self.home.numStories = null;\n        self.home.numBedrooms = null;\n        self.home.numBathrooms = null;\n        self.home.acType = null;\n        self.home.heatingType = null;\n        self.home.installationDate = null;\n    };\n\n    self.clearRoomForm = function () {\n        self.room.alias = null;\n        self.room.size = null;\n        self.room.numWindows = null;\n        self.room.numStory = null;\n    };\n\n    self.addRoom = function (room) {\n\n        self.rooms.push({\n            alias: room.alias,\n            size: room.size,\n            numWindows: room.numWindows,\n            numStory: room.numStory\n        });\n\n        self.clearRoomForm();\n    };\n\n    self.removeRoom = function (index) {\n        self.rooms.splice(index, 1);\n    };\n\n    self.setSessionForSummary = function (form) {\n        if (form.$valid) {\n            if ((\"localStorage\" in window) && window.localStorage !== null) {\n                localStorage.clear();\n                localStorage.customerInfo = JSON.stringify(self.customer);\n                localStorage.homeInfo = JSON.stringify(self.home);\n                localStorage.roomsInfo = JSON.stringify(self.rooms);\n            }\n\n            $location.path(\"/customer/new/summary\");\n        }\n    };\n}","angular\n    .module(\"main\")\n    .factory(\"customer-add.service\", CustomerAddService);\n\nCustomerAddService.$inject = [\"$http\"];\n\nfunction CustomerAddService($http) {\n\n    return {\n        //todo: possible have service methods to retrieve dropdown data & address validation-y things\n    };\n\n}","angular\n    .module(\"main\")\n    .component(\"customerDetails\", {\n        templateUrl: \"views/customer/customer-details/customer-details.template.html\",\n        controller: CustomerDetailsController\n    });\n\nCustomerDetailsController.$inject = [\"customer-details.service\", \"$routeParams\"];\n\nfunction CustomerDetailsController(customerDetailsService, $routeParams) {\n    var self = this;\n\n    self.customer = {};\n    self.house = {};\n    self.rooms = [];\n\n    self.params = $routeParams;\n\n    self.$onInit = function () {\n        if (self.params) {\n            getCustomerDetails(self.params.id);\n        }\n    };\n\n    var getCustomerDetails = function (id) {\n        customerDetailsService.getCustomerByID(id)\n            .then(function (response) {\n                self.customer = response;\n                if (self.customer && self.customer.id) {\n                    getHomeDetails(self.customer.id, getRooms);\n                }\n            });\n    };\n\n    var getHomeDetails = function (id, callback) {\n        customerDetailsService.getHomeByCustomerId(id)\n            .then(function (response) {\n                self.house = response;\n                if (self.house && self.house.id) {\n                    callback(self.house.id);\n                }\n            });\n    };\n\n    var getRooms = function (id) {\n        customerDetailsService.getRoomsByHomeId(id)\n            .then(function (response) {\n                self.rooms = response;\n            });\n    }\n}","angular\n    .module(\"main\")\n    .factory(\"customer-details.service\", CustomerDetailsService);\n\nCustomerDetailsService.$inject = [\"$http\", \"$log\"];\n\nfunction CustomerDetailsService($http, logger) {\n\n    return {\n        getCustomerByID: getCustomerByID,\n        getHomeByCustomerId: getHomeByCustomerId,\n        getRoomsByHomeId: getRoomsByHomeId\n    };\n\n    function getCustomerByID(id) {\n        return $http.get(\"/api/customer/\" + id)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n\n    function getHomeByCustomerId(id) {\n        return $http.get(\"/api/house/\" + id)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n\n    function getRoomsByHomeId(id) {\n        return $http.get(\"/api/house/\" + id + \"/rooms\")\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n};","angular\n    .module(\"main\")\n    .component(\"customerList\", {\n        templateUrl: \"views/customer/customer-list/customer-list.template.html\",\n        controller: CustomerListController\n    });\n\nCustomerListController.$inject = [\"customer-list.service\", \"$location\"];\n\nfunction CustomerListController(customerListService, $location, auth) {\n    var self = this;\n\n    self.customers = [];\n\n    self.$onInit = function () {\n        self.getCustomerList();\n    };\n\n    self.getCustomerList = function () {\n        customerListService.getCustomerList()\n            .then(function (response) {\n                self.customers = response;\n            });\n    };\n\n    self.viewCustomerDetails = function (id) {\n        $location.path(\"/customer/\" + id);\n    };\n\n    self.addNewCustomer = function () {\n        $location.path(\"/customer/new\");\n    };\n};","angular\n    .module(\"main\")\n    .factory(\"customer-list.service\", CustomerListService);\n\nCustomerListService.$inject = [\"$http\", \"$log\"];\n\nfunction CustomerListService($http, logger) {\n\n    return {\n        getCustomerList: getCustomerList\n    };\n\n    function getCustomerList() {\n        return $http.get(\"/api/customers\")\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n};","angular\n    .module(\"main\")\n    .component(\"customerSummary\", {\n        templateUrl: \"views/customer/customer-summary/customer-summary.template.html\",\n        controller: CustomerSummaryController\n    });\n\nCustomerSummaryController.$inject = [\"customer-summary.service\", \"$location\"];\n\nfunction CustomerSummaryController(customerSummaryService, $location, $mdToast) {\n    var self = this;\n\n    self.customerInfo = {};\n    self.homeInfo = {};\n    self.rooms = [];\n\n    self.$onInit = function () {\n        getInfoFromLocalStorage();\n    };\n\n    self.save = function () {\n        saveCustomerInfo();\n    };\n\n    var getInfoFromLocalStorage = function () {\n        if ((\"localStorage\" in window) && window.localStorage !== null) {\n            if (localStorage.customerInfo) self.customerInfo = JSON.parse(localStorage.customerInfo);\n            if (localStorage.homeInfo) self.homeInfo = JSON.parse(localStorage.homeInfo);\n            if (localStorage.roomsInfo) self.rooms = JSON.parse(localStorage.roomsInfo);\n        }\n    };\n\n    var saveCustomerInfo = function () {\n        customerSummaryService.saveCustomerInfo(self.customerInfo)\n            .then(function (response) {\n                saveHouseInfo(response.id);\n            });\n    };\n\n    var saveHouseInfo = function (customerId) {\n\n        var reqObj = {\n            \"customerId\": customerId,\n            \"homeInfo\": self.homeInfo,\n            \"roomsInfo\": self.rooms\n        };\n\n        customerSummaryService.saveHomeInfo(reqObj)\n            .then(function (data) {\n                localStorage.clear();\n                $location.path(\"/customers\");\n            });\n    };\n}","angular\n    .module(\"main\")\n    .factory(\"customer-summary.service\", CustomerSummaryService);\n\nCustomerSummaryService.$inject = [\"$http\", \"$log\"];\n\nfunction CustomerSummaryService($http, logger) {\n\n    return {\n        saveHomeInfo: saveHomeInfo,\n        saveCustomerInfo: saveCustomerInfo\n    };\n\n    function saveHomeInfo(data) {\n        return $http.post(\"/api/house/save\", data)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n\n    function saveCustomerInfo(data) {\n        return $http.post(\"/api/customer/save\", data)\n            .then(onComplete, onError);\n\n        function onComplete(response) {\n            return response.data;\n        };\n\n        function onError(error) {\n            logger.error(error.data);\n        };\n    };\n}","\"use strict\"\n\nangular\n    .module(\"main\")\n    .component(\"bottomNav\", {\n        templateUrl: \"views/common/footer.template.html\",\n        controller: FooterController\n    });\n\nFooterController.$inject = [];\n\nfunction FooterController() {\n}","\"use strict\"\n\nangular\n    .module(\"main\")\n    .component(\"topNav\", {\n        templateUrl: \"views/common/header.template.html\"\n    });\n\nNavigationController.$inject = [];\n\nfunction NavigationController() {\n}","angular\n    .module(\"main\")\n    .factory(\"utils.service\", UtilsService)\n\nUtilsService.$inject = [];\n\nfunction UtilsService () {\n  return {\n    findById: function findById(a, id) {\n      for (var i = 0; i < a.length; i++) {\n        if (a[i].id == id) return a[i];\n      }\n      return null;\n    }\n  };\n};","angular\n\t.module(\"main\")\n\t.factory(\"authService\", AuthService);\n\nAuthService.$inject = [\"$http\", \"$q\", \"$log\", \"$location\", \"$cookies\"];\n\n//todo: extract locationing out of service move into a broadcast of sorts.... or just a httpprovidor.interceptor\nfunction AuthService($http, $q, logger, $location, $cookies) {\n\n\treturn {\n\t\tgetUser: getUser\n\t};\n\n\tfunction getUser() {\n\t\treturn $http.get(\"/auth\")\n\t\t\t.then(onComplete, onError);\n\n\t\tfunction onComplete(response) {\n\t\t\treturn response.data;\n\t\t};\n\n\t\tfunction onError(error) {\n\t\t\t$location.path(\"/\");\n\t\t};\t\n    };\n}","angular.module(\"main\", [\"ngMaterial\", \"ngMessages\", \"ngRoute\", \"ngCookies\"])\n    .config(function ($routeProvider) {\n        $routeProvider\n            .when(\"/\", { \n                template: \"<login></login>\" \n            })\n            .when(\"/customers\", {\n                template: \"<customer-list></customer-list>\",\n                resolve: {\n                    user: function (authService) {\n                        authService.getUser();\n                    }\n                }\n            })\n            .when(\"/customer/new\", {\n                template: \"<customer-add></customer-add>\",\n                resolve: {\n                    user: function (authService) {\n                        authService.getUser();\n                    }\n                }\n            })\n            .when(\"/customer/new/summary\", {\n                template: \"<customer-summary></customer-summary>\",\n                resolve: {\n                    user: function (authService) {\n                        authService.getUser();\n                    }\n                }\n            })\n            .when(\"/customer/:id\", {\n                template: \"<customer-details></customer-details>\",\n                resolve: {\n                    user: function (authService) {\n                        authService.getUser();\n                    }\n                }\n            })\n    });"],"sourceRoot":"/source/"}